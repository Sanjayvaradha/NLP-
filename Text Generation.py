#!/usr/bin/env python
# coding: utf-8

# In[8]:


def read_file(filepath):
    with open(filepath) as f:
        text = f.read()
    return text


# In[9]:


import spacy
nlp = spacy.load('en',disable=['parser', 'tagger','ner'])

nlp.max_length = 1198623


# In[10]:


def separate_punc(doc_text):
    return [token.text.lower() for token in nlp(doc_text) if token.text not in '\n\n \n\n\n!"-#$%&()--.*+,-/:;<=>?@[\\]^_`{|}~\t\n ']


# In[11]:


d = read_file('C:\\Users\\sanja\\OneDrive\\Documents\\moby_dick_four_chapters.txt')
tokens = separate_punc(d)


# In[23]:


#tokens[0:26]
#tokens[(28-26):28]


# In[15]:


len(tokens)


# In[80]:


###########Create Sequences##########################

num_len = 25+1 ###### give 25 words as train data and 26th word as label

text_sequence=[]

for i in range(num_len,len(tokens)):
    single_sequence = tokens[i-num_len:i] 
    text_sequence.append(single_sequence)


# In[81]:


#' '.join(text_sequence[1])
print(len(text_sequence[0]))


# In[30]:


################### Tokenizing the text_sequence #####################

from keras.preprocessing.text import Tokenizer

tokenizer = Tokenizer()
tokenizer.fit_on_texts(text_sequence)
sequence=tokenizer.texts_to_sequences(text_sequence)


# In[38]:


#tokenizer.index_word
#tokenizer.word_counts


# In[41]:


vocab = len(tokenizer.word_counts)
vocab


# In[69]:


import numpy as np

sequences = np.array(sequence)#### converting into array for training purpose


# In[79]:


from keras.utils import to_categorical  ##### converting labels into one-hot encoding

X = sequences[:,:-1]### X train data
y= sequences[:,-1]   ### y label
y = to_categorical(y,num_classes = vocab+1)
X.shape


# In[83]:


seq_len = X.shape[1]
seq_len
y.shape


# In[63]:


##########  setting the model ######################
import keras
from keras.models import Sequential
from keras.layers import Dense,LSTM,Embedding


# In[75]:


def create_model(vocab,seq_len):
    model = Sequential()
    model.add(Embedding(input_dim=vocab ,output_dim=25, input_length=seq_len))
    model.add(LSTM(units=100,return_sequences=True))
    model.add(LSTM(units=100))
    model.add(Dense(100,activation='relu'))

    model.add(Dense(vocab,activation='softmax'))
    model.compile(optimizer='Adam',loss='categorical_crossentropy',metrics=['accuracy'])
    model.summary()

    return model


# In[84]:


model = create_model(vocab+1,seq_len)


# In[85]:


model.fit(X, y, batch_size=128, epochs=200,verbose=1)


# In[121]:


input_text=  text_sequence[1]
input_text = ' '.join(input_text)
input_text


# In[122]:


encoded_text = tokenizer.texts_to_sequences([input_text])[0]
pad_encoded = pad_sequences([encoded_text], maxlen=25, truncating='pre')
pred_word_ind = model.predict_classes(pad_encoded, verbose=0)[0]

predicted_text=tokenizer.index_word[pred_word_ind]
predicted_text


# In[ ]:


############# Making it a function ##########################
############## It geneartes us next 50 words by prediction ####################


# In[137]:


from random import randint
from pickle import load
from keras.models import load_model
from keras.preprocessing.sequence import pad_sequences


# In[138]:


import random
random.seed(10)
random_pick = random.randint(0,len(text_sequence))


# In[142]:


random_seed_text = text_sequence[1]
seed_text = ' '.join(random_seed_text)
len(seed_text)
seed_text


# In[154]:


def generate_text(model, tokenizer, seq_len, seed_text, num_gen_words):
    '''
    INPUTS:
    model : model that was trained on text data
    tokenizer : tokenizer that was fit on text data
    seq_len : length of training sequence
    seed_text : raw string text to serve as the seed
    num_gen_words : number of words to be generated by model
    '''
    
    # Final Output
    output_text = []
    
    # Intial Seed Sequence
    input_text = seed_text
    
    # Create num_gen_words
    for i in range(num_gen_words):
        
        # Take the input text string and encode it to a sequence
        encoded_text = tokenizer.texts_to_sequences([input_text])[0]
        
        # Pad sequences to our trained rate (50 words in the video)
        pad_encoded = pad_sequences([encoded_text], maxlen=seq_len, truncating='pre')
        
        # Predict Class Probabilities for each word
        pred_word_ind = model.predict_classes(pad_encoded, verbose=0)[0]
        
        # Grab word
        pred_word = tokenizer.index_word[pred_word_ind] 
        
        # Update the sequence of input text (shifting one over with the new word)
        input_text += ' ' + pred_word
        
        output_text.append(pred_word)
        
    # Make it look like a sentence.
    return ' '.join(output_text)


# In[155]:


generate_text(model,tokenizer,seq_len,seed_text=seed_text,num_gen_words=50)


# In[ ]:





# In[ ]:




